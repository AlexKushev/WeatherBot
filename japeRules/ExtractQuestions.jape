Phase: FindQuestions
Input: Token Forecast WeatherDetail WeatherCondition
Options: control = appelt

Macro: POSSIBLE_VERBS
(
	{Token.category == "VB", Token.string == "bring"} | 
	{Token.category == "VB", Token.string == "take"} | 
	{Token.category == "VB", Token.string == "need"}
)

Macro: QUESTIONS_WITH_WH_WORD
(
	{Token.category == "WP"} 
	(({Token.category == "VBZ", Token.root == "be"} {Token.category == "VBG", Token.root == "go"} {Token.category == "TO"} {Token.category == "VB"}) | ({Token.category == "MD"} {Token.category == "VB", Token.string == "be"}) | {Token.category == "VBZ", Token.root == "be"}) 
	({Token.category == "DT"} | ({Token.kind == "word"})?) 
	({Forecast} | {WeatherDetail} | ({Token.category == "JJ"} {WeatherDetail}))
)

Macro: QUESTIONS_INVERSE_WITH_MODAL
(
	({Token.category == "MD"} {Token.category == "PRP"} {WeatherCondition}) |
	({Token.category == "MD"} ({Token.category == "PRP"} | ({Token.category == "DT"} {Forecast})) {Token.category == "VB", Token.string == "be"} {WeatherCondition})
)

Macro: QUESTIONS_INVERSE
(
	{Token.category == "VBZ", Token.root == "be"} ({Token.category == "PRP"} | ({Token.category == "DT"} {Forecast})) ({Token.category == "VBG"} {Token.category == "TO"} ({Token.category == "VB", Token.string == "be"})?)? {WeatherCondition}
)

Macro: QUESTIONS_SPECIAL
(
	({Token.category == "MD"} {Token.category == "PRP"} (POSSIBLE_VERBS) ({Token.category == "NN", Token.string ==~ "((?i)umbrella)"} | ({Token.kind == "word"})* {Token.category == "NN", Token.string ==~ "((?i)umbrella)"})) | 
	({Token.category == "MD"} {Token.category == "PRP"} ((POSSIBLE_VERBS) | {Token.category == "VB", Token.string == "wear"}) ({Token.category == "NN", Token.string ==~ "((?i)raincoat)"} | ({Token.kind == "word"})* {Token.category == "NN", Token.string ==~ "((?i)raincoat)"})) | 
	({Token.category == "MD"} {Token.category == "PRP"} ((POSSIBLE_VERBS) | {Token.category == "VB", Token.string == "wear"}) ({Token.category == "NNS", Token.string ==~ "((?i)sunglasses)"} | ({Token.kind == "word"})* {Token.category == "NNS", Token.string ==~ "((?i)sunglasses)"}))
)

Rule: RuleToFindQuestionSentences
(
	(QUESTIONS_WITH_WH_WORD) | (QUESTIONS_INVERSE_WITH_MODAL) | (QUESTIONS_INVERSE) | (QUESTIONS_SPECIAL)
	
):match
-->
{
	gate.AnnotationSet matchAnnotationSet = (gate.AnnotationSet) bindings.get("match");
	gate.AnnotationSet forecastAnnotationSet = gate.Utils.getContainedAnnotations(inputAS, matchAnnotationSet, "Forecast");
	gate.AnnotationSet weatherDetailAnnotationSet = gate.Utils.getContainedAnnotations(inputAS, matchAnnotationSet, "WeatherDetail");
	gate.AnnotationSet weatherConditionAnnotationSet = gate.Utils.getContainedAnnotations(inputAS, matchAnnotationSet, "WeatherCondition");

	String key = "";
	if (!forecastAnnotationSet.isEmpty()) {
		gate.Annotation forecastAnnotation = (gate.Annotation) forecastAnnotationSet.iterator().next();
		key = gate.Utils.stringFor(doc, forecastAnnotation);
	}

	if (!weatherDetailAnnotationSet.isEmpty()) {
		gate.Annotation weatherDetailAnnotation = (gate.Annotation) weatherDetailAnnotationSet.iterator().next();
		key = gate.Utils.stringFor(doc, weatherDetailAnnotation);
	}

	if (!weatherConditionAnnotationSet.isEmpty()) {
		gate.Annotation weatherConditionAnnotation = (gate.Annotation) weatherConditionAnnotationSet.iterator().next();
		key = gate.Utils.stringFor(doc, weatherConditionAnnotation);
	}

	gate.FeatureMap features = Factory.newFeatureMap();
	features.put("key", key);
 	features.put("rule", "RuleToFindQuestionSentences");
 	doc.getAnnotations().add(matchAnnotationSet.firstNode(), matchAnnotationSet.lastNode(), "WeatherQuestionSentences", features);
}